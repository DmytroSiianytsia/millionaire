{"version":3,"sources":["assets/img/hand.png","components/button/Button.js","components/endPage/EndPage.js","components/mainPage/MainPage.js","components/mainPage/func.js","components/startPage/StartPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","text","action","className","onClick","EndPage","totalScore","changeFinishGame","src","hand","alt","MainPage","updateTotalScore","changeStartGame","useState","answers","getAnswers","level","changeLevel","levelsForMobile","showLevels","activeClass","changeActiveClass","levels","dataJson","money","map","item","index","key","reverse","useEffect","rndAnswers","arr","min","max","copyArr","slice","newArr","length","randomIndex","Math","ceil","floor","random","splice","push","randomOrder","questions","question","getQuestion","tabIndex","isTrue","setTimeout","answerOptions","answer","StartPage","App","startGame","finishGame","score","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.233df2b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hand.2be9a6ee.png\";","import React from 'react'\nimport './button.scss'\n\nexport default function Button({text, action}) {\n  return (\n    <button className=\"btn\" onClick={action}>{text}</button>\n  )\n}\n","import React from 'react'\nimport hand from '../../assets/img/hand.png'\nimport Button from '../button/Button'\nimport './endPage.scss'\n\nexport default function EndPage({ totalScore, changeFinishGame }) {\n  return (\n    <div className=\"container\">\n      <div className=\"end-page\">\n        <div className=\"end-page__image\">\n          <img className=\"end-page__img\" src={hand} alt=\"hand\" />\n        </div>\n        <div className=\"end-page__content\">\n          <h2 className=\"end-page__title\">Total score:</h2>\n          <div className=\"end-page__score\">${totalScore} earned</div>\n          <Button text=\"Try again\" action={() => changeFinishGame(false)} />\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport dataJson from '../../data.json'\nimport { randomOrder } from './func'\nimport './mainPage.scss'\n\nexport default function MainPage({ updateTotalScore, changeFinishGame, changeStartGame }) {\n  const [answers, getAnswers] = useState('')\n  const [level, changeLevel] = useState(0)\n  const [levelsForMobile, showLevels] = useState('')\n  const [activeClass, changeActiveClass] = useState('')\n\n  function getQuestion(level) {\n    return dataJson.questions[level].question\n  } \n\n  function getElementsAnswers(arr) {    \n    return arr.map(\n      (item, index) =>\n        <div\n          className={`main-page__answer ${activeClass}`}\n          key={index}\n          tabIndex=\"2\"\n          onClick={() => {\n            checkAnswer(item.isTrue)\n          }}\n        >\n          <span className=\"main-page__options\">\n            {dataJson.answerOptions[index]}\n          </span>\n          {item.answer}\n        </div>\n    )\n  }\n\n  const levels = dataJson.money.map((item, index) =>\n    <div\n      className={\n        `main-page__level\n         ${index === level && 'active'}\n         ${index < level && 'solved'}`\n      }\n      key={index}\n    >\n      {`$${item}`}\n    </div>\n  ).reverse()\n\n  function checkAnswer(isCorrect) {\n    if (isCorrect && (level < 11)) {\n      setTimeout(() => {\n        changeActiveClass('correct')\n      }, 500)\n      setTimeout(() => {\n        changeActiveClass('')\n        changeLevel(level => level + 1)\n      }, 1500)\n    } else {\n      updateTotalScore(dataJson.money[level - 1] || 0)\n      setTimeout(() => {\n        changeActiveClass('wrong')\n      }, 500)\n      setTimeout(() => {\n        changeActiveClass('')\n        changeFinishGame(true)\n        changeStartGame(false)\n      }, 1500)\n    }\n  }\n \n  useEffect(() => {\n    let rndAnswers = randomOrder(dataJson.questions[level].answers)\n    getAnswers(rndAnswers)    \n  }, [level]) \n\n  return (\n    <div className=\"main-page\">\n      <div className=\"burger\" onClick={() => showLevels('main-page__levels--show')}>\n        <div className=\"burger__item\">\n          burger\n        </div>\n      </div>\n      <div className=\"main-page__quiz-field\">\n        <h2 className=\"main-page__question\">{getQuestion(level)}</h2>\n        <div className=\"main-page__answers\">\n          {answers && getElementsAnswers(answers)}\n        </div>\n      </div>\n      <div className={`main-page__levels ${levelsForMobile}`}>\n        <div className=\"close\" onClick={() => showLevels('')}>&times;</div>\n        {levels}\n      </div>\n    </div>\n  )\n}\n","export function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport function randomOrder(arr) {\n  const copyArr = arr.slice()\n  const newArr = []\n  while (copyArr.length) {\n    let randomIndex = getRandomInt(0, copyArr.length)\n    let item = copyArr.splice(randomIndex, 1)\n    newArr.push(item[0])\n  }\n  return newArr\n}\n","import React from 'react'\nimport Button from '../button/Button'\nimport hand from '../../assets/img/hand.png'\nimport './startPage.scss'\n\nexport default function StartPage({ changeStartGame }) {\n  return (\n    <div className=\"start-page\">\n      <div className=\"container\">\n        <div className=\"start-page__inner\">\n          <div className=\"start-page__image\">\n            <img src={hand} alt=\"hand\" className=\"start-page__img\" />\n          </div>\n          <div className=\"start-page__content\">\n            <h1 className=\"start-page__title\">\n              Who wants to be aÂ millionaire?\n            </h1>\n            <Button text=\"Start\" action={() => changeStartGame(true)}/>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useState } from 'react';\nimport './app.scss';\nimport EndPage from './components/endPage/EndPage';\nimport MainPage from './components/mainPage/MainPage';\nimport StartPage from './components/startPage/StartPage'\n\nfunction App() {\n  const [startGame, changeStartGame] = useState(false)\n  const [totalScore, updateTotalScore] = useState(0)\n  const [finishGame, changeFinishGame] = useState(false)\n\n  return (\n    <div className=\"app\">\n      {\n        finishGame\n          ?\n          <EndPage totalScore={totalScore} changeFinishGame={changeFinishGame} />\n          :\n          startGame\n            ?\n            <MainPage\n              totalScore={totalScore}\n              updateTotalScore={score => updateTotalScore(totalScore + score)}\n              changeFinishGame={changeFinishGame}\n              changeStartGame={changeStartGame}\n            />\n            :\n            <StartPage changeStartGame={changeStartGame} />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}