{"version":3,"sources":["assets/img/hand.png","components/button/Button.js","components/endPage/EndPage.js","components/hexagon/Hexagon.js","components/burger/Burger.js","components/mainPage/MainPage.js","components/mainPage/func.js","components/startPage/StartPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","text","action","className","onClick","EndPage","totalScore","changeFinishGame","src","hand","alt","Hexagon","variant","mod","width","height","viewBox","fill","xmlns","d","stroke","Burger","handleClick","MainPage","updateTotalScore","changeStartGame","useState","answers","getAnswers","indexClickedElem","changeIndexClickedElem","level","changeLevel","levelsForMobile","showLevels","activeClass","changeActiveClass","levels","dataJson","money","map","item","index","key","reverse","finishGame","setTimeout","addCorrectClass","useEffect","rndAnswers","arr","min","max","copyArr","slice","newArr","length","randomIndex","Math","ceil","floor","random","splice","push","randomOrder","questions","question","getQuestion","isCorrect","checkAnswer","isTrue","answerOptions","answer","StartPage","App","startGame","score","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8gGAAAA,EAAOC,QAAU,IAA0B,kC,4SCG5B,SAASC,EAAT,GAAiC,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,OACpC,OACE,4BAAQC,UAAU,MAAMC,QAASF,GAASD,G,MCA/B,SAASI,EAAT,GAAoD,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,iBAC5C,OACE,yBAAKJ,UAAU,aACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,gBAAgBK,IAAKC,IAAMC,IAAI,UAEhD,yBAAKP,UAAU,qBACb,wBAAIA,UAAU,mBAAd,gBACA,yBAAKA,UAAU,mBAAf,IAAmCG,EAAnC,WACA,kBAACN,EAAD,CAAQC,KAAK,YAAYC,OAAQ,kBAAMK,GAAiB,S,uBCZnD,SAASI,EAAT,GAA0C,IAAvBC,EAAsB,EAAtBA,QAASX,EAAa,EAAbA,KAAMY,EAAO,EAAPA,IAC/C,OACE,yBAAKV,UAAS,kBAAaU,IACzB,yBAAKV,UAAU,qBACb,yBAAKA,UAAU,eAAeW,MAAM,MAAMC,OAAO,KAAKC,QAAQ,aAAaC,KAAK,OAAOC,MAAM,8BAC3F,0BAAMC,EAAE,oQAAoQF,KAAK,QAAQG,OAAO,cAGpS,yBAAKjB,UAAU,iBACb,8BAAOS,GAAgBX,I,MCThB,SAASoB,EAAT,GAAkC,IAAhBC,EAAe,EAAfA,YAC/B,OACE,yBAAKnB,UAAU,SAASC,QAASkB,GAC/B,yBAAKnB,UAAU,gBAAf,WCCS,SAASoB,EAAT,GAA4E,IAAxDC,EAAuD,EAAvDA,iBAAkBjB,EAAqC,EAArCA,iBAAkBkB,EAAmB,EAAnBA,gBAAmB,EAC1DC,mBAAS,IADiD,mBACjFC,EADiF,KACxEC,EADwE,OAErCF,mBAAS,IAF4B,mBAEjFG,EAFiF,KAE/DC,EAF+D,OAG3DJ,mBAAS,GAHkD,mBAGjFK,EAHiF,KAG1EC,EAH0E,OAIlDN,mBAAS,IAJyC,mBAIjFO,EAJiF,KAIhEC,EAJgE,OAK/CR,mBAAS,IALsC,mBAKjFS,EALiF,KAKpEC,EALoE,KAWxF,IAAMC,EAASC,EAASC,MAAMC,KAAI,SAACC,EAAMC,GAAP,OAChC,yBACEvC,UAAU,mBACVwC,IAAKD,GAEL,kBAAC/B,EAAD,CACEV,KAAI,WAAMwC,GACV5B,IAAG,iDAEC6B,IAAUX,GAAS,SAFpB,uBAGCW,EAAQX,GAAS,SAHlB,oBAOPa,UAEF,SAASC,IACPC,YAAW,WACTV,EAAkB,IAClB7B,GAAiB,GACjBkB,GAAgB,KACf,KAGL,SAASsB,IACPD,YAAW,WACTV,EAAkB,aACjB,KAwDL,OALAY,qBAAU,WACR,IAAIC,EC3FD,SAAqBC,GAG1B,IAFA,IAP2BC,EAAKC,EAO1BC,EAAUH,EAAII,QACdC,EAAS,GACRF,EAAQG,QAAQ,CACrB,IAAIC,GAVqBN,EAUM,EAVDC,EAUIC,EAAQG,OAT5CL,EAAMO,KAAKC,KAAKR,GAChBC,EAAMM,KAAKE,MAAMR,GACVM,KAAKE,MAAMF,KAAKG,UAAYT,EAAMD,IAAQA,GAQ3CV,EAAOY,EAAQS,OAAOL,EAAa,GACvCF,EAAOQ,KAAKtB,EAAK,IAEnB,OAAOc,EDmFYS,CAAY1B,EAAS2B,UAAUlC,GAAOJ,SACvDC,EAAWqB,KACV,CAAClB,IAGF,yBAAK5B,UAAU,aACb,kBAACkB,EAAD,CAAQC,YAAa,kBAAMY,EAAW,8BACtC,yBAAK/B,UAAU,yBACb,wBAAIA,UAAU,uBA3FpB,SAAqB4B,GACnB,OAAOO,EAAS2B,UAAUlC,GAAOmC,SA0FQC,CAAYpC,IACjD,yBAAK5B,UAAU,sBACZwB,GAA8BA,EApD1Ba,KACT,SAACC,EAAMC,GAAP,OACE,yBACEvC,UAAS,oBACTwC,IAAKD,EACLtC,QAAS,YAajB,SAAqBgE,EAAW1B,GAC9BZ,EAAuBY,GACvBN,EAAkB,YACdgC,GAAcrC,EAAQ,IAEV,KAAVA,IACFP,EAAiBc,EAASC,MAAMR,IAChCgB,IACAF,KAGFE,IACAD,YAAW,WACTV,EAAkB,IAClBJ,GAAY,SAAAD,GAAK,OAAIA,EAAQ,OAC5B,OAEHP,EAAiBc,EAASC,MAAMR,EAAQ,IAAM,GAzChDe,YAAW,WACTV,EAAkB,WACjB,KAyCDS,KA/BMwB,CAAY5B,EAAK6B,OAAQ5B,KAG3B,kBAAC/B,EAAD,CACEC,QAAS0B,EAASiC,cAAc7B,GAChCzC,KAAMwC,EAAK+B,OACX3D,IAAKgB,IAAqBa,GAASP,UA2CzC,yBAAKhC,UAAS,4BAAuB8B,IACnC,yBAAK9B,UAAU,QAAQC,QAAS,kBAAM8B,EAAW,MAAjD,QACCG,I,ME3GM,SAASoC,EAAT,GAAyC,IAApBhD,EAAmB,EAAnBA,gBAClC,OACE,yBAAKtB,UAAU,cACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,qBACb,yBAAKK,IAAKC,IAAMC,IAAI,OAAOP,UAAU,qBAEvC,yBAAKA,UAAU,uBACb,wBAAIA,UAAU,qBAAd,qCAGA,kBAACH,EAAD,CAAQC,KAAK,QAAQC,OAAQ,kBAAMuB,GAAgB,UCgBhDiD,MA3Bf,WAAgB,IAAD,EACwBhD,oBAAS,GADjC,mBACNiD,EADM,KACKlD,EADL,OAE0BC,mBAAS,GAFnC,mBAENpB,EAFM,KAEMkB,EAFN,OAG0BE,oBAAS,GAHnC,mBAGNmB,EAHM,KAGMtC,EAHN,KAKb,OACE,yBAAKJ,UAAU,OAEX0C,EAEE,kBAACxC,EAAD,CAASC,WAAYA,EAAYC,iBAAkBA,IAEnDoE,EAEE,kBAACpD,EAAD,CACEjB,WAAYA,EACZkB,iBAAkB,SAAAoD,GAAK,OAAIpD,EAAiBlB,EAAasE,IACzDrE,iBAAkBA,EAClBkB,gBAAiBA,IAGnB,kBAACgD,EAAD,CAAWhD,gBAAiBA,MCfpBoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.41a9a718.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hand.2be9a6ee.png\";","import React from 'react'\nimport './button.scss'\n\nexport default function Button({text, action}) {\n  return (\n    <button className=\"btn\" onClick={action}>{text}</button>\n  )\n}\n","import React from 'react'\nimport hand from '../../assets/img/hand.png'\nimport Button from '../button/Button'\nimport './endPage.scss'\n\nexport default function EndPage({ totalScore, changeFinishGame }) {\n  return (\n    <div className=\"container\">\n      <div className=\"end-page\">\n        <div className=\"end-page__image\">\n          <img className=\"end-page__img\" src={hand} alt=\"hand\" />\n        </div>\n        <div className=\"end-page__content\">\n          <h2 className=\"end-page__title\">Total score:</h2>\n          <div className=\"end-page__score\">${totalScore} earned</div>\n          <Button text=\"Try again\" action={() => changeFinishGame(false)} />\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport './hexagon.scss'\n\nexport default function Hexagon({ variant, text, mod }) {\n  return (\n    <div className={`hexagon ${mod}`}>\n      <div className=\"hexagon__svg-wrap\">\n        <svg className=\"hexagon__img\" width=\"373\" height=\"72\" viewBox=\"0 0 373 72\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M22.7172 5.28344C24.8781 2.28016 28.3521 0.5 32.052 0.5H340.948C344.648 0.5 348.122 2.28016 350.283 5.28344L372.384 36L350.283 66.7166C348.122 69.7198 344.648 71.5 340.948 71.5H32.052C28.3521 71.5 24.8781 69.7198 22.7172 66.7166L0.615976 36L22.7172 5.28344Z\" fill=\"white\" stroke=\"#d0d0d8\" />\n        </svg>\n      </div>\n      <div className=\"hexagon__text\">\n        <span>{variant}</span>{text}\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport './burger.scss'\n\nexport default function Burger({ handleClick }) {\n  return (\n    <div className=\"burger\" onClick={handleClick}>\n      <div className=\"burger__item\">\n        burger\n        </div>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport dataJson from '../../data.json'\nimport { randomOrder } from './func'\nimport './mainPage.scss'\nimport Hexagon from '../hexagon/Hexagon'\nimport Burger from '../burger/Burger'\n\nexport default function MainPage({ updateTotalScore, changeFinishGame, changeStartGame }) {\n  const [answers, getAnswers] = useState('')\n  const [indexClickedElem, changeIndexClickedElem] = useState('')\n  const [level, changeLevel] = useState(0)\n  const [levelsForMobile, showLevels] = useState('')\n  const [activeClass, changeActiveClass] = useState('')\n\n  function getQuestion(level) {\n    return dataJson.questions[level].question\n  }\n\n  const levels = dataJson.money.map((item, index) =>\n    <div\n      className=\"main-page__level\"\n      key={index}\n    >\n      <Hexagon\n        text={`$${item}`}\n        mod={`\n          hexagon--levels\n          ${index === level && 'active'}\n          ${index < level && 'solved'}\n        `}\n      />\n    </div>\n  ).reverse()\n\n  function finishGame() {\n    setTimeout(() => {\n      changeActiveClass('')\n      changeFinishGame(true)\n      changeStartGame(false)\n    }, 2000)\n  }\n\n  function addCorrectClass() {\n    setTimeout(() => {\n      changeActiveClass('correct')\n    }, 1000)\n  }\n\n  function addWrongClass() {\n    setTimeout(() => {\n      changeActiveClass('wrong')\n    }, 1000)\n  }\n\n  function getElementsAnswers(arr) {\n    return arr.map(\n      (item, index) =>\n        <div\n          className={`main-page__answer`}\n          key={index}\n          onClick={() => {\n            checkAnswer(item.isTrue, index)\n          }}\n        >\n          <Hexagon\n            variant={dataJson.answerOptions[index]}\n            text={item.answer}\n            mod={indexClickedElem === index && activeClass}\n          />\n        </div>\n    )\n  }\n\n  function checkAnswer(isCorrect, index) {\n    changeIndexClickedElem(index)\n    changeActiveClass('selected')\n    if (isCorrect && (level < 12)) {\n\n      if (level === 11) {\n        updateTotalScore(dataJson.money[level])\n        addCorrectClass()\n        finishGame()\n      }\n\n      addCorrectClass()\n      setTimeout(() => {\n        changeActiveClass('')\n        changeLevel(level => level + 1)\n      }, 2000)\n    } else {\n      updateTotalScore(dataJson.money[level - 1] || 0)\n      addWrongClass()\n      finishGame()\n    }\n  }\n\n  useEffect(() => {\n    let rndAnswers = randomOrder(dataJson.questions[level].answers)\n    getAnswers(rndAnswers)\n  }, [level])\n\n  return (\n    <div className=\"main-page\">\n      <Burger handleClick={() => showLevels('main-page__levels--show')} />\n      <div className=\"main-page__quiz-field\">\n        <h2 className=\"main-page__question\">{getQuestion(level)}</h2>\n        <div className=\"main-page__answers\">\n          {answers && getElementsAnswers(answers)}\n        </div>\n      </div>\n      <div className={`main-page__levels ${levelsForMobile}`}>\n        <div className=\"close\" onClick={() => showLevels('')}>&times;</div>\n        {levels}\n      </div>\n    </div>\n  )\n}\n","export function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport function randomOrder(arr) {\n  const copyArr = arr.slice()\n  const newArr = []\n  while (copyArr.length) {\n    let randomIndex = getRandomInt(0, copyArr.length)\n    let item = copyArr.splice(randomIndex, 1)\n    newArr.push(item[0])\n  }\n  return newArr\n}\n","import React from 'react'\nimport Button from '../button/Button'\nimport hand from '../../assets/img/hand.png'\nimport './startPage.scss'\n\nexport default function StartPage({ changeStartGame }) {\n  return (\n    <div className=\"start-page\">\n      <div className=\"container\">\n        <div className=\"start-page__inner\">\n          <div className=\"start-page__image\">\n            <img src={hand} alt=\"hand\" className=\"start-page__img\" />\n          </div>\n          <div className=\"start-page__content\">\n            <h1 className=\"start-page__title\">\n              Who wants to be a millionaire?\n            </h1>\n            <Button text=\"Start\" action={() => changeStartGame(true)}/>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useState } from 'react';\nimport './app.scss';\nimport EndPage from './components/endPage/EndPage';\nimport MainPage from './components/mainPage/MainPage';\nimport StartPage from './components/startPage/StartPage'\n\nfunction App() {\n  const [startGame, changeStartGame] = useState(false)\n  const [totalScore, updateTotalScore] = useState(0)\n  const [finishGame, changeFinishGame] = useState(false)\n\n  return (\n    <div className=\"app\">\n      {\n        finishGame\n          ?\n          <EndPage totalScore={totalScore} changeFinishGame={changeFinishGame} />\n          :\n          startGame\n            ?\n            <MainPage\n              totalScore={totalScore}\n              updateTotalScore={score => updateTotalScore(totalScore + score)}\n              changeFinishGame={changeFinishGame}\n              changeStartGame={changeStartGame}\n            />\n            :\n            <StartPage changeStartGame={changeStartGame} />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}